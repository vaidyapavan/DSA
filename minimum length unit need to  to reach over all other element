import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    public static int hurdleRace(int k, int arr[]) {
        int max_height = arr[0];
        
        // Find the maximum height of the hurdles
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] > max_height) {
                max_height = arr[i];
            }
        }
        
        // If the max height is less than or equal to the jump height k, no doses are needed
        if (k >= max_height) {
            return 0;
        } 
        
        // Calculate the number of doses needed
        int doses_needed = max_height - k;
        
        return doses_needed;
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        Scanner s = new Scanner(System.in);
        int n = s.nextInt();
        int arr[] = new int[n];
        int k = s.nextInt();
        for (int i = 0; i < n; i++) {
            arr[i] = s.nextInt();
        }
        Result obj = new Result();
        int result = obj.hurdleRace(k, arr);
        System.out.println(result);
    }
}
