import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {
    // Method to calculate breaking records
    int[] breakingRecords(int[] scores) {
        int maxCount = 0, minCount = 0;
        
        // Edge case for empty array or single element
        if (scores.length <= 1) {
            return new int[] { maxCount, minCount };
        }
        
        // Iterate through the array to count breaking records
        int maxScore = scores[0];
        int minScore = scores[0];
        
        for (int i = 1; i < scores.length; i++) {
            if (scores[i] > maxScore) {
                maxScore = scores[i];
                maxCount++;
            }
            if (scores[i] < minScore) {
                minScore = scores[i];
                minCount++;
            }
        }
        
        return new int[] { maxCount, minCount };
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] scores = new int[n];
        
        for (int i = 0; i < n; i++) {
            scores[i] = scanner.nextInt();
        }
        
        Result result = new Result();
        int[] counts = result.breakingRecords(scores);
        
        System.out.println(counts[0] + " " + counts[1]);
        
        scanner.close();
    }
}
